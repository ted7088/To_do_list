1. 다형성
ex 1) 운전자 -> 역할 (클라이언트)
자동차 -> 구현 (인터페이스)
자동차 종류가 다 달라도 운전자는 운전 가능하다.
클라이언트의 영향을 주지 않고 새로운 기능을 계속 개발 가능하다. (신차가 계속 나와도 클라이언트는 바뀔필요가 없음)

ex2) 로미오 줄리엣 공연
로미오 ,줄리엣 역할 하는사람은 대본만 보고도 충분히 가능하다.

->유연하고 변경이 가능해야한다.

장점 : 1. 클라이언트는 대상의 역할(인터페이스)만 알면된다.
2. 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
3. 클라이언트는 구현 대상의 내부 구조가 변경되도 영향을 받지 않는다.
4. 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.

역할 : 인터페이스
구현 : 인터페이스를 구현한 클래스 , 클래스 객체 IMPL

자바 언어의 다형성
OVERRIDE 를 통해 구현 


스프링에서 가장 중요한건 다형성
스프링에서 이야기하는 제어의 역전 IOC, 의존관계 DI는 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.

codestates.com/blog/content/객체-지향-프로그래밍-특징
